import React, { useState } from 'react';
import { ShoppingCart, Plus, Minus, Trash2, Package, DollarSign, Calendar, User } from 'lucide-react';

const MachineSalesApp = () => {
  const [cart, setCart] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [showCart, setShowCart] = useState(false);
  const [customerInfo, setCustomerInfo] = useState({
    name: '',
    email: '',
    phone: '',
    company: ''
  });

  const machinery = [
    {
      id: 1,
      name: 'Excavadora CAT 320D',
      category: 'excavadoras',
      price: 180000,
      image: 'https://images.unsplash.com/photo-1581094794329-c8112a89af12?w=400',
      description: 'Excavadora hidráulica de 20 toneladas, motor diésel de 122 HP',
      specs: ['Motor: C6.6 ACERT', 'Peso: 20,300 kg', 'Capacidad: 0.93 m³']
    },
    {
      id: 2,
      name: 'Bulldozer Komatsu D65EX',
      category: 'bulldozers',
      price: 220000,
      image: 'https://images.unsplash.com/photo-1623376306058-f96bbdfa7b72?w=400',
      description: 'Bulldozer de alta potencia para trabajos pesados',
      specs: ['Motor: 190 HP', 'Peso: 17,400 kg', 'Hoja: 3.71 m³']
    },
    {
      id: 3,
      name: 'Retroexcavadora JCB 3CX',
      category: 'retroexcavadoras',
      price: 95000,
      image: 'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=400',
      description: 'Máquina versátil para excavación y carga',
      specs: ['Motor: 109 HP', 'Peso: 8,200 kg', 'Alcance: 6.06 m']
    },
    {
      id: 4,
      name: 'Grúa Liebherr LTM 1060',
      category: 'gruas',
      price: 380000,
      image: 'https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400',
      description: 'Grúa móvil telescópica de 60 toneladas',
      specs: ['Capacidad: 60 t', 'Altura: 52 m', 'Motor: 367 HP']
    },
    {
      id: 5,
      name: 'Cargadora Frontal CAT 966M',
      category: 'cargadoras',
      price: 165000,
      image: 'https://images.unsplash.com/photo-1601584115197-04ecc0da31d7?w=400',
      description: 'Cargadora de ruedas para manejo de materiales',
      specs: ['Motor: 230 HP', 'Capacidad: 3.8 m³', 'Peso: 17,800 kg']
    },
    {
      id: 6,
      name: 'Motoniveladora John Deere 772G',
      category: 'motoniveladoras',
      price: 285000,
      image: 'https://images.unsplash.com/photo-1611273426858-450d8e3c9fce?w=400',
      description: 'Motoniveladora para nivelación y acabado',
      specs: ['Motor: 215 HP', 'Hoja: 4.27 m', 'Peso: 16,700 kg']
    }
  ];

  const categories = [
    { id: 'all', name: 'Todas las Categorías', icon: Package },
    { id: 'excavadoras', name: 'Excavadoras', icon: Package },
    { id: 'bulldozers', name: 'Bulldozers', icon: Package },
    { id: 'retroexcavadoras', name: 'Retroexcavadoras', icon: Package },
    { id: 'gruas', name: 'Grúas', icon: Package },
    { id: 'cargadoras', name: 'Cargadoras', icon: Package },
    { id: 'motoniveladoras', name: 'Motoniveladoras', icon: Package }
  ];

  const filteredMachinery = selectedCategory === 'all' 
    ? machinery 
    : machinery.filter(item => item.category === selectedCategory);

  const addToCart = (machine) => {
    setCart(prev => {
      const existing = prev.find(item => item.id === machine.id);
      if (existing) {
        return prev.map(item => 
          item.id === machine.id 
            ? { ...item, quantity: item.quantity + 1 }
            : item
        );
      }
      return [...prev, { ...machine, quantity: 1 }];
    });
  };

  const updateQuantity = (id, change) => {
    setCart(prev => prev.map(item => 
      item.id === id 
        ? { ...item, quantity: Math.max(0, item.quantity + change) }
        : item
    ).filter(item => item.quantity > 0));
  };

  const removeFromCart = (id) => {
    setCart(prev => prev.filter(item => item.id !== id));
  };

  const getTotalPrice = () => {
    return cart.reduce((total, item) => total + (item.price * item.quantity), 0);
  };

  const formatPrice = (price) => {
    return new Intl.NumberFormat('es-PE', {
      style: 'currency',
      currency: 'USD'
    }).format(price);
  };

  const handleCheckout = () => {
    if (cart.length === 0) {
      alert('La cartera está vacía');
      return;
    }
    if (!customerInfo.name || !customerInfo.email) {
      alert('Complete los datos del cliente');
      return;
    }
    
    alert(`Cotización generada para ${customerInfo.name}\nTotal: ${formatPrice(getTotalPrice())}\nSe enviará por email a: ${customerInfo.email}`);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-800">
      {/* Header */}
      <header className="bg-black/30 backdrop-blur-sm border-b border-white/10 sticky top-0 z-40">
        <div className="max-w-7xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <Package className="h-8 w-8 text-yellow-400" />
              <h1 className="text-2xl font-bold text-white">MachineryPro</h1>
            </div>
            
            <button
              onClick={() => setShowCart(!showCart)}
              className="relative bg-yellow-500 hover:bg-yellow-600 text-black px-4 py-2 rounded-lg font-semibold transition-all duration-300 flex items-center space-x-2 shadow-lg hover:shadow-yellow-500/25"
            >
              <ShoppingCart className="h-5 w-5" />
              <span>Cartera ({cart.reduce((sum, item) => sum + item.quantity, 0)})</span>
              {cart.length > 0 && (
                <div className="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full h-6 w-6 flex items-center justify-center">
                  {cart.reduce((sum, item) => sum + item.quantity, 0)}
                </div>
              )}
            </button>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-4 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
          {/* Sidebar - Categories */}
          <div className="lg:col-span-1">
            <div className="bg-white/10 backdrop-blur-sm rounded-xl p-6 border border-white/10">
              <h2 className="text-xl font-bold text-white mb-6">Categorías</h2>
              <div className="space-y-2">
                {categories.map(category => (
                  <button
                    key={category.id}
                    onClick={() => setSelectedCategory(category.id)}
                    className={`w-full text-left px-4 py-3 rounded-lg transition-all duration-300 flex items-center space-x-3 ${
                      selectedCategory === category.id
                        ? 'bg-yellow-500 text-black font-semibold'
                        : 'text-white hover:bg-white/10'
                    }`}
                  >
                    <category.icon className="h-5 w-5" />
                    <span>{category.name}</span>
                  </button>
                ))}
              </div>
            </div>
          </div>

          {/* Main Content */}
          <div className="lg:col-span-3">
            {!showCart ? (
              /* Products Grid */
              <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
                {filteredMachinery.map(machine => (
                  <div key={machine.id} className="bg-white/10 backdrop-blur-sm rounded-xl overflow-hidden border border-white/10 hover:border-yellow-500/50 transition-all duration-300 group">
                    <div className="relative overflow-hidden">
                      <img
                        src={machine.image}
                        alt={machine.name}
                        className="w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300"
                      />
                      <div className="absolute inset-0 bg-gradient-to-t from-black/50 to-transparent" />
                    </div>
                    
                    <div className="p-6">
                      <h3 className="text-xl font-bold text-white mb-2">{machine.name}</h3>
                      <p className="text-gray-300 text-sm mb-4">{machine.description}</p>
                      
                      <div className="space-y-2 mb-4">
                        {machine.specs.map((spec, index) => (
                          <div key={index} className="text-gray-400 text-xs bg-black/30 rounded px-2 py-1">
                            {spec}
                          </div>
                        ))}
                      </div>
                      
                      <div className="flex items-center justify-between">
                        <div className="text-2xl font-bold text-yellow-400">
                          {formatPrice(machine.price)}
                        </div>
                        <button
                          onClick={() => addToCart(machine)}
                          className="bg-gradient-to-r from-yellow-500 to-orange-500 hover:from-yellow-600 hover:to-orange-600 text-black px-4 py-2 rounded-lg font-semibold transition-all duration-300 flex items-center space-x-2 shadow-lg hover:shadow-yellow-500/25"
                        >
                          <Plus className="h-4 w-4" />
                          <span>Agregar</span>
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              /* Cart View */
              <div className="space-y-6">
                <div className="bg-white/10 backdrop-blur-sm rounded-xl p-6 border border-white/10">
                  <h2 className="text-2xl font-bold text-white mb-6">Cartera de Compras</h2>
                  
                  {cart.length === 0 ? (
                    <div className="text-center py-8">
                      <ShoppingCart className="h-16 w-16 text-gray-400 mx-auto mb-4" />
                      <p className="text-gray-400 text-lg">La cartera está vacía</p>
                    </div>
                  ) : (
                    <div className="space-y-4">
                      {cart.map(item => (
                        <div key={item.id} className="flex items-center space-x-4 bg-black/20 rounded-lg p-4">
                          <img
                            src={item.image}
                            alt={item.name}
                            className="w-16 h-16 object-cover rounded-lg"
                          />
                          <div className="flex-1">
                            <h3 className="font-semibold text-white">{item.name}</h3>
                            <p className="text-yellow-400 font-bold">{formatPrice(item.price)}</p>
                          </div>
                          <div className="flex items-center space-x-2">
                            <button
                              onClick={() => updateQuantity(item.id, -1)}
                              className="bg-red-500 hover:bg-red-600 text-white p-1 rounded"
                            >
                              <Minus className="h-4 w-4" />
                            </button>
                            <span className="text-white px-3 py-1 bg-black/30 rounded">{item.quantity}</span>
                            <button
                              onClick={() => updateQuantity(item.id, 1)}
                              className="bg-green-500 hover:bg-green-600 text-white p-1 rounded"
                            >
                              <Plus className="h-4 w-4" />
                            </button>
                            <button
                              onClick={() => removeFromCart(item.id)}
                              className="bg-gray-600 hover:bg-gray-700 text-white p-1 rounded ml-2"
                            >
                              <Trash2 className="h-4 w-4" />
                            </button>
                          </div>
                          <div className="text-white font-bold">
                            {formatPrice(item.price * item.quantity)}
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>

                {cart.length > 0 && (
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {/* Customer Info */}
                    <div className="bg-white/10 backdrop-blur-sm rounded-xl p-6 border border-white/10">
                      <h3 className="text-xl font-bold text-white mb-4 flex items-center">
                        <User className="h-5 w-5 mr-2" />
                        Datos del Cliente
                      </h3>
                      <div className="space-y-4">
                        <input
                          type="text"
                          placeholder="Nombre completo"
                          value={customerInfo.name}
                          onChange={(e) => setCustomerInfo({...customerInfo, name: e.target.value})}
                          className="w-full bg-black/30 border border-gray-600 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-yellow-500 focus:outline-none"
                        />
                        <input
                          type="email"
                          placeholder="Email"
                          value={customerInfo.email}
                          onChange={(e) => setCustomerInfo({...customerInfo, email: e.target.value})}
                          className="w-full bg-black/30 border border-gray-600 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-yellow-500 focus:outline-none"
                        />
                        <input
                          type="tel"
                          placeholder="Teléfono"
                          value={customerInfo.phone}
                          onChange={(e) => setCustomerInfo({...customerInfo, phone: e.target.value})}
                          className="w-full bg-black/30 border border-gray-600 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-yellow-500 focus:outline-none"
                        />
                        <input
                          type="text"
                          placeholder="Empresa (opcional)"
                          value={customerInfo.company}
                          onChange={(e) => setCustomerInfo({...customerInfo, company: e.target.value})}
                          className="w-full bg-black/30 border border-gray-600 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-yellow-500 focus:outline-none"
                        />
                      </div>
                    </div>

                    {/* Order Summary */}
                    <div className="bg-white/10 backdrop-blur-sm rounded-xl p-6 border border-white/10">
                      <h3 className="text-xl font-bold text-white mb-4 flex items-center">
                        <DollarSign className="h-5 w-5 mr-2" />
                        Resumen del Pedido
                      </h3>
                      <div className="space-y-3">
                        <div className="flex justify-between text-gray-300">
                          <span>Subtotal:</span>
                          <span>{formatPrice(getTotalPrice())}</span>
                        </div>
                        <div className="flex justify-between text-gray-300">
                          <span>Impuestos (18%):</span>
                          <span>{formatPrice(getTotalPrice() * 0.18)}</span>
                        </div>
                        <div className="border-t border-gray-600 pt-3">
                          <div className="flex justify-between text-xl font-bold text-yellow-400">
                            <span>Total:</span>
                            <span>{formatPrice(getTotalPrice() * 1.18)}</span>
                          </div>
                        </div>
                        <button
                          onClick={handleCheckout}
                          className="w-full bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white py-3 rounded-lg font-bold transition-all duration-300 flex items-center justify-center space-x-2 shadow-lg hover:shadow-green-500/25"
                        >
                          <Calendar className="h-5 w-5" />
                          <span>Generar Cotización</span>
                        </button>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default MachineSalesApp;